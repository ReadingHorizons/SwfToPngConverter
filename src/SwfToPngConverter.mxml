<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   showStatusBar="false"
					   width="1024"
					   height="768"
					   applicationComplete="_handleAppComplete(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.flash.UIMovieClip;
			import mx.graphics.codec.PNGEncoder;
			
			import spark.events.TextOperationEvent;
			
			//--------------------------------------------------------------------------
			//
			//  Properties
			//
			//--------------------------------------------------------------------------
			
			//----------------------------------
			//  Private:
			//----------------------------------
			
			private const DEFAULT_TEXT_COLOR:uint = 0x000000;
			private const DISABLED_TEXT_COLOR:uint = 0x999999;
			
			private var curConvertedCount:uint;
			private var fileSystemExport:File;
			private var fileSystemImport:File;
			private var loaders:Vector.<Loader>;
			private var previewSwf:MovieClip;
			[Bindable]
			private var selectedFiles:ArrayList;
			private var swfMovieClip:UIMovieClip;
			private var swfPreviewLoader:Loader;
			
			//--------------------------------------------------------------------------
			//
			//  Methods
			//
			//--------------------------------------------------------------------------
			
			//----------------------------------
			//  Private:
			//----------------------------------
			
			private function _handleAppComplete(event:FlexEvent):void
			{
				_init();
			}
			
			private function _init():void
			{
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				versionLabel.text = "v "+appXML.elements("*")[3].toString();
				curConvertedCount = 0;
				fileList.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, handleNativeDragEnter);
				createFileSystems();
			}
			
			private function browseForDestination():void
			{
				fileSystemExport.browseForDirectory("Select the folder where you would like to export the png files.");
			}
			
			private function browseForSwfs():void
			{
				if(fileRadioBtn.selected)
				{
					fileSystemImport.browseForOpenMultiple("Select the swf file(s) that you want to convert.");
				}
				else
				{
					fileSystemImport.browseForDirectory("Select the folder that contains the swf files that you want to convert.");
				}
			}
			
			private function createFileSystems():void
			{
				fileSystemExport = new File();
				fileSystemExport.addEventListener(Event.CANCEL, handleCancel, false, 0, true);
				fileSystemExport.addEventListener(Event.SELECT, handleSelect, false, 0, true);
				
				fileSystemImport = new File();
				fileSystemImport.addEventListener(Event.CANCEL, handleCancel, false, 0, true);
				fileSystemImport.addEventListener(Event.SELECT, handleSelect, false, 0, true);
				fileSystemImport.addEventListener(FileListEvent.SELECT_MULTIPLE, handleSelectMultiple, false, 0, true);
			}
			
			private function exportPNGs():void
			{
				curConvertedCount = 0;
				loaders = new Vector.<Loader>();
				var curFile:File;
				var curLoader:Loader;
				var curSwfFile:String;
				var len:uint = selectedFiles.length;
				for(var i:int=0; i<len; i++) 
				{
					curSwfFile = selectedFiles.source[i].nativePath;
					curFile = new File().resolvePath(curSwfFile);
					curLoader = new Loader();
					loaders.push(curLoader);
					curLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleComplete);
					curLoader.load(new URLRequest(curFile.url));
				}
			}
			
			private function handleCancel(event:Event):void
			{
				//loadingLabel.visible = false;
				if(selectedFiles == null || selectedFiles.length == 0)
				{
					exportBtn.enabled = false;
				}
			}
			
			private function handleChange(event:Event):void
			{
				switch(event.currentTarget)
				{
					case adjustSizeCheckBox:
						handleSizeCheckBoxChange(event);
						break;
					case scaleRadio:
						scaleRadioSelected();
						break;
					case resizeRadio:
						resizeRadioSelected();
						break;
					case endOfFilenameInput:
						handleEndOfFilenameChange(event);
						break;
				}
			}
			
			private function handleClick(event:MouseEvent):void
			{
				switch(event.currentTarget)
				{
					case browseSourceBtn:
						browseForSwfs();
						break;
					case browseDestinationBtn:
						browseForDestination();
						break;
					case exportBtn:
						if(destinationUrl.text == "")
						{
							Alert.show("Please select a destination to export the files.", "Warning");
						}
						else
						{
							loadingLabel.visible = true;
							exportPNGs();
						}
						break;
					case fileList:
						removePreviewSwf();
						loadSwf(fileList.selectedItem.url);
						break;
				}
			}
			
			private function handleComplete(event:Event):void
			{
				var bmpData:BitmapData;
				var swf:MovieClip = event.currentTarget.content;
				var multiplier:Number = 1;
				var scaleMatrix:Matrix;
				
				if(adjustSizeCheckBox.selected)
				{
					if(scaleRadio.selected)
					{
						var scale:Number = Number(multiplierInput.text)
						if(isNaN(scale))
						{
							multiplier = 1;
						}
						else
						{
							if(scale > 0)
							{
								multiplier = scale;
							}
							else
							{
								multiplier = 1;
							}
						}
						swf.scaleX = swf.scaleY = multiplier;
						desiredWidthInput.text = swf.width.toString();
						desiredHeightInput.text = swf.height.toString();
						scaleMatrix = new Matrix(multiplier, 0, 0, multiplier);
						bmpData = new BitmapData(swf.loaderInfo.width*multiplier, swf.loaderInfo.height*multiplier, true, 0x00FFFFFF);
					}
					else if(resizeRadio.selected)
					{
						var desiredWidth:Number = 0;
						var desiredHeight:Number = 0;
						var heightMultiplier:Number = 1;
						var widthMultiplier:Number = 1;
						
						if(constrainCheckBox.selected)
						{
							var ratio:Number = Math.min(swf.width, swf.height) / Math.max(swf.width, swf.height);
							
							if(desiredHeightInput.text != "")
							{
								desiredHeight = Number(desiredHeightInput.text);
								desiredWidth = desiredHeight * ratio;
							}
							else if(desiredWidthLabel.text != "")
							{
								desiredWidth = Number(desiredWidthInput.text);
								desiredHeight = desiredWidth * ratio;
							}
						}
						else
						{
							desiredWidth = Number(desiredWidthInput.text);
							desiredHeight = Number(desiredHeightInput.text);
						}
						
						widthMultiplier = desiredWidth / swf.width;
						heightMultiplier = desiredHeight / swf.height;
						swf.scaleX = widthMultiplier;
						swf.scaleY = heightMultiplier;
						if(constrainCheckBox.selected)
						{
							multiplierInput.text = widthMultiplier.toPrecision(4);
						}
						scaleMatrix = new Matrix(widthMultiplier, 0, 0, heightMultiplier);
						bmpData = new BitmapData(swf.loaderInfo.width*widthMultiplier, swf.loaderInfo.height*heightMultiplier, true, 0x00FFFFFF);
					}
					bmpData.draw(swf, scaleMatrix);
				}
				else
				{
					bmpData = new BitmapData(swf.loaderInfo.width, swf.loaderInfo.height, true, 0x00FFFFFF);
					bmpData.draw(swf);
				}
				
				var filename:String = event.currentTarget.url;
				filename = filename.substring(filename.lastIndexOf("/")+1, filename.lastIndexOf("."))+endOfFilenameInput.text+".png";
				var file:File;
				file = new File(destinationUrl.text+"/"+filename);
				var encoder:PNGEncoder = new PNGEncoder();
				var fileStream:FileStream = new FileStream();
				fileStream.openAsync(file, FileMode.WRITE);
				fileStream.writeBytes(encoder.encode(bmpData));
				fileStream.close();
				curConvertedCount++;
				if(curConvertedCount == selectedFiles.length)
				{
					loadingLabel.visible = false;
				}
			}
			
			private function handleEndOfFilenameChange(event:Event):void
			{
				sampleEndOfFilename.text = "sample"+endOfFilenameInput.text+".png";
			}
			
			private function handleFocusIn(event:FocusEvent):void
			{
				if(constrainCheckBox.selected)
				{
					if(event.currentTarget == desiredHeightInput)
					{
						desiredWidthInput.text = "";
					}
					else if(event.currentTarget == desiredWidthInput)
					{
						desiredHeightInput.text = "";
					}
				}
					
			}
			
			private function handleNativeDragComplete(event:NativeDragEvent):void
			{
				//trace("Complete");
			}
			
			private function handleNativeDragDrop(event:NativeDragEvent):void
			{
				//trace("Drop");
				fileList.removeEventListener(NativeDragEvent.NATIVE_DRAG_DROP, handleNativeDragDrop);
				var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				files.sortOn("url");
				selectedFiles = new ArrayList(files);
				removePreviewSwf();
				removeNonSwfFiles();
				exportBtn.enabled = true;
				if(selectedFiles.length > 0)
				{
					var destination:String = selectedFiles.getItemAt(0).nativePath
					destinationUrl.text = destination.substring(0, destination.lastIndexOf("\\"));
				}
			}
			
			private function handleNativeDragEnter(event:NativeDragEvent):void
			{
				if(!fileList.hasEventListener(NativeDragEvent.NATIVE_DRAG_DROP))
				{
					//trace("Enter");
					NativeDragManager.acceptDragDrop(fileList);
					fileList.addEventListener(NativeDragEvent.NATIVE_DRAG_COMPLETE, handleNativeDragComplete);
					fileList.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, handleNativeDragDrop);
					fileList.addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, handleNativeDragExit);
					fileList.addEventListener(NativeDragEvent.NATIVE_DRAG_OVER, handleNativeDragOver);
				}
			}
			
			private function handleNativeDragExit(event:NativeDragEvent):void
			{
				//trace("Exit");
			}
			
			private function handleNativeDragOver(event:NativeDragEvent):void
			{
				//trace("Over");
				NativeDragManager.acceptDragDrop(fileList);
			}
			
			private function handleSelect(event:Event):void
			{
				switch(event.currentTarget)
				{
					case fileSystemImport:
						if(fileSystemImport.isDirectory)
						{
							selectedFiles = new ArrayList(fileSystemImport.getDirectoryListing());
							removePreviewSwf();
							removeNonSwfFiles();
							exportBtn.enabled = true;
							if(selectedFiles.length > 0)
							{
								var destination:String = selectedFiles.getItemAt(0).nativePath
								destinationUrl.text = destination.substring(0, destination.lastIndexOf("\\"));
							}
						}
						else
						{
							//loadingLabel.visible = false;
						}
						break;
					case fileSystemExport:
						destinationUrl.text = event.currentTarget.nativePath;
						break;
				}
			}
			
			private function handleSelectMultiple(event:FileListEvent):void
			{
				var files:Array = event.files;
				files.sortOn("url");
				selectedFiles = new ArrayList(files);
				removePreviewSwf();
				removeNonSwfFiles();
				exportBtn.enabled = true;
				var destination:String = selectedFiles.getItemAt(0).nativePath
				destinationUrl.text = destination.substring(0, destination.lastIndexOf("\\"));
			}
			
			private function handleSizeCheckBoxChange(event:Event):void
			{
				if(event.currentTarget.selected)
				{
					scaleRadio.enabled = true;
					multiplierInput.enabled = true;
					resizeRadio.enabled = true;
					if(scaleRadio.selected)
					{
						scaleRadioSelected();
					}
					else
					{
						resizeRadioSelected();
					}
				}
				else
				{
					scaleRadio.enabled = false;
					multiplierInput.enabled = false;
					resizeRadio.enabled = false;
					desiredWidthInput.enabled = false;
					desiredHeightInput.enabled = false;
					constrainCheckBox.enabled = false;
					multiplierLabel.setStyle("color", DISABLED_TEXT_COLOR);
					desiredWidthLabel.setStyle("color", DISABLED_TEXT_COLOR);
					desiredHeightLabel.setStyle("color", DISABLED_TEXT_COLOR);
				}
			}
			
			private function handleSwfPreviewLoadComplete(event:Event):void
			{
				swfPreviewLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, handleSwfPreviewLoadComplete);
				
				previewSwf = event.currentTarget.content;
				
				var swfOriginalHeight:Number = previewSwf.height;
				var swfPadding:Number = 16;
				var targetScale:Number = 1;
				var targetSize:Number = swfContainer.width-swfPadding;
				
				if(previewSwf.width > targetSize)
				{
					targetScale = targetSize/previewSwf.width;
					previewSwf.scaleX = previewSwf.scaleY = targetScale;
				}
				
				targetSize = swfContainer.height-swfPadding;
				if(previewSwf.height > targetSize)
				{
					targetScale = targetSize/swfOriginalHeight;
					previewSwf.scaleX = previewSwf.scaleY = targetScale;
				}
				
				previewSwf.x = (swfContainer.width-previewSwf.width)/2;
				previewSwf.y = (swfContainer.height-previewSwf.height)/2;
				
				swfMovieClip = new UIMovieClip();
				swfMovieClip.addChild(previewSwf);
				swfContainer.addElement(swfMovieClip);
			}
			
			private function listLabel(value:Object):String
			{
				var label:String = value.nativePath;
				
				return label.substr(label.lastIndexOf("\\")+1);
			}
			
			private function loadSwf(swfFile:String):void
			{
				swfPreviewLoader = new Loader();
				swfPreviewLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleSwfPreviewLoadComplete);
				swfPreviewLoader.load(new URLRequest(swfFile));
			}
			
			private function removeNonSwfFiles():void
			{
				var curExtension:String;
				var curFile:String;
				var filesWereRemoved:Boolean = false;
				var len:uint = selectedFiles.source.length;
				for(var i:int=len-1; i>=0; i--) 
				{
					curFile = selectedFiles.source[i].nativePath;
					curExtension = curFile.substr(curFile.lastIndexOf(".")+1);
					if(curExtension != "swf")
					{
						selectedFiles.removeItemAt(i);
						filesWereRemoved = true;
					}
				}
				if(filesWereRemoved)
				{
					Alert.show("File types other than .swf were encountered and not included.", "Info");
				}
			}
			
			private function removePreviewSwf():void
			{
				swfContainer.removeAllElements();
			}
			
			private function resizeRadioSelected():void
			{
				desiredWidthInput.enabled = true;
				desiredWidthLabel.setStyle("color", DEFAULT_TEXT_COLOR);
				desiredHeightInput.enabled = true;
				desiredHeightLabel.setStyle("color", DEFAULT_TEXT_COLOR);
				constrainCheckBox.enabled = true;
				multiplierInput.text = "";
				multiplierInput.enabled = false;
				multiplierLabel.setStyle("color", DISABLED_TEXT_COLOR);
			}
			
			private function scaleRadioSelected():void
			{
				multiplierInput.enabled = true;
				multiplierLabel.setStyle("color", DEFAULT_TEXT_COLOR);
				desiredWidthInput.text = "";
				desiredWidthInput.enabled = false;
				desiredWidthLabel.setStyle("color", DISABLED_TEXT_COLOR);
				desiredHeightInput.text = "";
				desiredHeightInput.enabled = false;
				desiredHeightLabel.setStyle("color", DISABLED_TEXT_COLOR);
				constrainCheckBox.enabled = false;
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup paddingBottom="12" paddingLeft="12" paddingRight="12" horizontalAlign="left" verticalAlign="top" width="100%" height="100%">
		<s:Label fontSize="32" text="Swf to Png Converter" paddingTop="12" textAlign="center" width="100%" />
		<s:Spacer height="20" />
		<s:HGroup paddingRight="6" verticalAlign="middle" width="50%">
			<s:Label fontSize="16" text="Input Type:" paddingTop="3" />
			<s:Spacer width="4" />
			<s:RadioButton id="fileRadioBtn" groupName="browseType" fontSize="14" label="File" selected="true" change="handleChange(event)" />
			<s:RadioButton id="directoryRadioBtn" groupName="browseType" fontSize="14" label="Directory" change="handleChange(event)" />
			<s:Spacer width="100%" />
			<s:Button id="browseSourceBtn" label="Browse" click="handleClick(event)" />
		</s:HGroup>
		<s:Spacer height="2" />
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="50%" height="100%">
				<s:Label fontSize="16" text="Files to convert:" />
				<s:List id="fileList" dataProvider="{selectedFiles}" labelFunction="listLabel" width="100%" height="100%" click="handleClick(event)" />
			</s:VGroup>
			<s:Spacer width="2%" />
			<s:VGroup width="48%" height="100%">
				<s:Label fontSize="16" text="Swf Preview:" />
				<s:BorderContainer width="100%" height="38%">
					<s:Scroller id="swfScrollPane"  width="100%" height="100%">
						<s:Group id="swfContainer" width="100%" height="100%"></s:Group>
					</s:Scroller>
				</s:BorderContainer>
				<s:Label fontSize="16" text="Output Options:" />
				<s:BorderContainer width="100%" height="62%">
					<s:VGroup gap="10" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" width="100%" height="100%">
						<s:CheckBox id="adjustSizeCheckBox" fontSize="14" label="Adjust Output Size" change="handleChange(event)" />
						<s:HGroup paddingLeft="20">
							<s:RadioButton id="scaleRadio" groupName="outputSize" enabled="false" fontSize="14" label="Scale" selected="true" change="handleChange(event)" />
						</s:HGroup>
						<s:HGroup paddingLeft="40" verticalAlign="middle">
							<s:Label id="multiplierLabel" color="#999999" fontSize="14" paddingTop="2" text="Multiplier:" width="100" />
							<s:TextInput id="multiplierInput" enabled="false" text="1" width="50" />
						</s:HGroup>
						<s:Spacer height="12" />
						<s:HGroup paddingLeft="20">
							<s:RadioButton id="resizeRadio" groupName="outputSize" enabled="false" fontSize="14" label="Resize" change="handleChange(event)" />
						</s:HGroup>
						<s:HGroup paddingLeft="40" verticalAlign="middle">
							<s:Label id="desiredWidthLabel" color="#999999" fontSize="14" paddingTop="2" text="Desired Width:" width="100" />
							<s:TextInput id="desiredWidthInput" enabled="false" focusIn="handleFocusIn(event)" width="50" />
						</s:HGroup>
						<s:HGroup paddingLeft="40" verticalAlign="middle">
							<s:Label id="desiredHeightLabel" color="#999999" fontSize="14" paddingTop="2" text="Desired Height:" width="100" />
							<s:TextInput id="desiredHeightInput" enabled="false" focusIn="handleFocusIn(event)" width="50" />
						</s:HGroup>
						<s:HGroup paddingLeft="40" verticalAlign="middle">
							<s:CheckBox id="constrainCheckBox" enabled="false" fontSize="14" label="Constrain Proportions:" selected="true" />
						</s:HGroup>
						<s:HGroup verticalAlign="middle">
							<s:Label fontSize="14" paddingTop="2" text="Add to end of Filename:" width="156" />
							<s:TextInput id="endOfFilenameInput" width="100" change="handleChange(event)" />
						</s:HGroup>
						<s:HGroup paddingLeft="20" verticalAlign="top">
							<s:Label color="#222222" fontSize="14" text="Example: " />
							<s:Label id="sampleEndOfFilename" color="#555555" fontStyle="italic" fontSize="14" text="sample.png" width="100%" />
						</s:HGroup>
					</s:VGroup>
				</s:BorderContainer>
			</s:VGroup>
		</s:HGroup>
		<s:Spacer height="8" />
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label fontSize="16" text="Export Destination:" />
			<s:TextInput id="destinationUrl" width="100%" editable="false" />
			<s:Button id="browseDestinationBtn" label="Browse" click="handleClick(event)" />
		</s:HGroup>
		<s:Spacer height="8" />
		<s:HGroup verticalAlign="middle" horizontalAlign="center" width="100%">
			<s:Button id="exportBtn" label="Convert and Export" enabled="false" click="handleClick(event)" />
		</s:HGroup>
		<s:Spacer height="4" />
		<s:Label id="versionLabel" color="#777777" textAlign="right" width="100%" />
	</s:VGroup>
	
	<s:BorderContainer id="loadingLabel" backgroundAlpha=".5" backgroundColor="#CCCCCC" borderAlpha=".5" borderColor="#CCCCCC" width="100%" height="100%" visible="false">
		<s:Label text="Converting..." fontSize="36" horizontalCenter="0" verticalCenter="0" />
	</s:BorderContainer>
	
</s:WindowedApplication>
